{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","c","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAkB5C,OAEI,0BAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAC,OAAOP,GAAP,mBAAsBO,OACrCN,EAAc,OAQd,2BACIO,KAAK,OACLC,MAAST,EACTU,SApBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,Y,uBCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAGbC,EAHa,iDAGoCC,UAAWH,GAH/C,+DAIAI,MAAOF,GAJP,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAeZM,GAfY,4CAAH,sDCEPO,EAAc,SAAC,GAAsB,IAAnBH,EAAkB,EAAlBA,MAAOV,EAAW,EAAXA,IAElC,OACI,yBAAKc,UAAU,0CACX,yBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,2BAAKA,KCHJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAqBxC,OAdAC,qBAAU,WAENxB,EAASC,GACJwB,MAAM,SAAAC,GAEHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAKtB,CAAEpB,IAEEqB,EDlB0BK,CAAc1B,GAAjCa,EAFuB,EAE7BN,KAAca,EAFe,EAEfA,QAGtB,OACI,oCACI,wBAAIJ,UAAU,qCAAsChB,GAElDoB,GAAW,uBAAGJ,UAAU,oCAAb,cAEb,yBAAKA,UAAU,aAGPH,EAAOJ,KAAK,SAAAC,GAAG,OACP,kBAAC,EAAD,eACIiB,IAAOjB,EAAIC,IACND,UEatBkB,EA7BM,WAAM,IAAD,EAEc1C,mBAAS,CAAE,cAFzB,mBAEf2C,EAFe,KAEH5C,EAFG,KAQtB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAEA,4BAEQ4C,EAAWpB,KAAK,SAAAT,GAAQ,OACnB,kBAAC,EAAD,CACG2B,IAAM3B,EACNA,SAAWA,UCnBvC8B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.18e93ba2.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault(); // evita el refresh de la pagina\r\n\r\n        if( inputValue.trim().length > 2){\r\n            setCategories(c =>  [ inputValue, ...c ]);\r\n            setInputValue('');\r\n        }\r\n        \r\n    }\r\n\r\n    return (\r\n    \r\n        <form onSubmit={ handleSubmit }>\r\n            <input\r\n                type=\"text\"\r\n                value ={ inputValue }\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n            \r\n      )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories : PropTypes.func.isRequired\r\n}\r\n","export const getGifs = async( category ) =>  {\r\n\r\n    //encodeURI reemplaza los espacios vacios por %20 etc\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category )}&limit=10&api_key=GAFpyXJr7h8ss9cyY0FnoP49fuyYuiew`\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url //el ? se pone por si no viene esa info\r\n        }\r\n    })\r\n\r\n    return gifs\r\n}\r\n","import React from 'react'\r\n\r\nexport const GifGridItem = ( { title, url } ) => {\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={ url } alt={ title } />\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data: images, loading} = useFetchGifs( category );\r\n\r\n    \r\n    return (\r\n        <>  \r\n            <h3 className=\"animate__animated animate__bounce\">{ category }</h3>\r\n\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n\r\n            <div className=\"card-grid\">\r\n                \r\n                {\r\n                    images.map( img => (\r\n                            <GifGridItem \r\n                                key= { img.id }\r\n                                { ...img } \r\n                            />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n        \r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    \r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(() => {\r\n        \r\n        getGifs( category )\r\n            .then( imgs => {\r\n\r\n                setstate({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n                \r\n            })\r\n\r\n    }, [ category ])\r\n\r\n    return state; //{ data:[], loading: true };\r\n\r\n}\r\n","// usar este snippets para crear componente   rafc\r\nimport React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () =>{\r\n\r\n    const [categories, setCategories] = useState([ 'One Punch'])\r\n    \r\n    /* const handleAdd = () =>{\r\n        setCategories(c =>  [ ...c,'Hunter']);\r\n    } */\r\n\r\n    return(\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories }/>\r\n            <hr/>\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( category =>\r\n                         <GifGrid\r\n                            key={ category }\r\n                            category={ category }\r\n                         />\r\n                    )\r\n                }\r\n            </ol>\r\n\r\n        </>\r\n    );\r\n} \r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}